import pandas as pd
import numpy as np
from scipy.signal import correlate
import plotly.graph_objects as go
import os

def find_best_z_offset(left_data, right_data, overlap_x_range=(290, 320)):
    """Find the best frame offset by matching patterns in overlap region"""
    
    # Filter for overlap region
    left_overlap = left_data[
        (left_data['pitch_x'] >= overlap_x_range[0]) & 
        (left_data['pitch_x'] <= overlap_x_range[1])
    ]
    right_overlap = right_data[
        (right_data['pitch_x'] >= overlap_x_range[0]) & 
        (right_data['pitch_x'] <= overlap_x_range[1])
    ]
    
    # Create time series of player counts in overlap region
    left_counts = left_overlap.groupby('frame')['tracking_id'].nunique()
    right_counts = right_overlap.groupby('frame')['tracking_id'].nunique()
    
    # Pad series to same length
    max_frame = max(left_counts.index.max(), right_counts.index.max())
    min_frame = min(left_counts.index.min(), right_counts.index.min())
    all_frames = range(min_frame, max_frame + 1)
    
    left_series = pd.Series(0, index=all_frames)
    right_series = pd.Series(0, index=all_frames)
    
    left_series.update(left_counts)
    right_series.update(right_counts)
    
    # Find offset using cross-correlation
    correlation = correlate(left_series, right_series)
    lags = np.arange(-(len(right_series)-1), len(left_series))
    offset = lags[np.argmax(correlation)]
    
    return offset

def visualize_matched_tracks(left_data, right_data, offset):
    fig = go.Figure()
    
    # Plot left camera data in blue
    for track_id in left_data['tracking_id'].unique():
        track = left_data[left_data['tracking_id'] == track_id]
        fig.add_trace(
            go.Scatter3d(
                x=track['pitch_x'],
                y=track['pitch_y'],
                z=track['frame'],
                mode='lines',
                name=f'Left {track_id}',
                line=dict(color='blue'),
                opacity=0.6
            )
        )
    
    # Plot right camera data in red with offset
    for track_id in right_data['tracking_id'].unique():
        track = right_data[right_data['tracking_id'] == track_id].copy()
        track['frame'] = track['frame'] - offset  # Apply the offset
        fig.add_trace(
            go.Scatter3d(
                x=track['pitch_x'],
                y=track['pitch_y'],
                z=track['frame'],
                mode='lines',
                name=f'Right {track_id}',
                line=dict(color='red'),
                opacity=0.6
            )
        )
    
    fig.update_layout(
        title=f"Synchronized Tracks (offset: {offset} frames)",
        scene=dict(
            bgcolor='black',
            xaxis=dict(title='Pitch X', gridcolor='gray'),
            yaxis=dict(title='Pitch Y', gridcolor='gray'),
            zaxis=dict(title='Frame', gridcolor='gray')
        ),
        showlegend=True,
        paper_bgcolor='black',
        plot_bgcolor='black',
        font=dict(color='white')
    )
    
    fig.show()

if __name__ == "__main__":
    # Get absolute paths
    current_dir = os.path.dirname(os.path.abspath(__file__))
    data_dir = os.path.join(os.path.dirname(current_dir), 'data')
    
    left_path = os.path.join(data_dir, 'camL_1.csv')
    right_path = os.path.join(data_dir, 'camR_1.csv')
    
    print("Loading data...")
    left_data = pd.read_csv(left_path)
    right_data = pd.read_csv(right_path)
    
    print("Finding best offset...")
    z_offset = find_best_z_offset(left_data, right_data)
    print(f"\nBest offset found: {z_offset} frames")
    
    print("Creating visualization...")
    visualize_matched_tracks(left_data, right_data, z_offset)